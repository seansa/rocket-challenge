// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/messages": {
            "post": {
                "description": "Processes an incoming rocket state message. Handles out-of-order and duplicate messages.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Receive rocket message",
                "parameters": [
                    {
                        "description": "Rocket message payload",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncomingMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of message processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/rockets": {
            "get": {
                "description": "Returns a list of the current states of all rockets in the system, sorted by channel ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rockets"
                ],
                "summary": "Get all rocket states",
                "responses": {
                    "200": {
                        "description": "List of all rockets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Rocket"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/rockets/{channel}": {
            "get": {
                "description": "Returns the current state of a specific rocket by its channel ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rockets"
                ],
                "summary": "Get a single rocket state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rocket Channel ID",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current state of the rocket",
                        "schema": {
                            "$ref": "#/definitions/model.Rocket"
                        }
                    },
                    "400": {
                        "description": "Missing rocket channel ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rocket not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.IncomingMessage": {
            "type": "object"
        },
        "model.MessageType": {
            "type": "string",
            "enum": [
                "RocketLaunched",
                "RocketSpeedIncreased",
                "RocketSpeedDecreased",
                "RocketExploded",
                "RocketMissionChanged"
            ],
            "x-enum-varnames": [
                "RocketLaunched",
                "RocketSpeedIncreased",
                "RocketSpeedDecreased",
                "RocketExploded",
                "RocketMissionChanged"
            ]
        },
        "model.Metadata": {
            "type": "object",
            "required": [
                "channel",
                "messageNumber",
                "messageTime",
                "messageType"
            ],
            "properties": {
                "channel": {
                    "type": "string"
                },
                "messageNumber": {
                    "type": "integer"
                },
                "messageTime": {
                    "type": "string"
                },
                "messageType": {
                    "$ref": "#/definitions/model.MessageType"
                }
            }
        },
        "model.Rocket": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "exploded": {
                    "type": "boolean"
                },
                "explosionReason": {
                    "type": "string"
                },
                "mission": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8088",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Rocket Service API",
	Description:      "This is a service that consumes messages from rockets and exposes their via a REST API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
